// Use rollup to inject here all the dependencies
const Ajv = require('ajv')

// This is a patch for rollup
let module = {
  "type": "wasm-wrapping"
};

// Some useful logging
console.log("Initializing context. Reading msg and node from Node.IO");
let msg = Node.IO.msg();
let node =  Node.IO.node();

const send = Node.IO.send;
const done = Node.IO.done;

node.send = send;
node.done = done

// This disables i18n. In practice we do not need this for the MVP
RED._ = function(obj) {
  return obj;
}

function mm(msg, send, done) {
  var validate = false;
  if (msg.schema) {
    // If input schema is different, re-compile it
    if (JSON.stringify(this.schema) != JSON.stringify(msg.schema)) {
      try {
        this.compiledSchema = ajv.compile(msg.schema);
        this.schema = msg.schema;
      } catch (e) {
        this.schema = null;
        this.compiledSchema = null;
        done(RED._("json.errors.schema-error-compile"));
        return;
      }
    }
    validate = true;
  }
  var value = RED.util.getMessageProperty(msg, node.property);
  if (value !== undefined) {
    if (typeof value === "string" || Buffer.isBuffer(value)) {
      // if (Buffer.isBuffer(value) && node.action !== "obj") {
      //     node.warn(RED._("json.errors.dropped")); done();
      // }
      // else
      if (node.action === "" || node.action === "obj") {
        try {
          RED.util.setMessageProperty(msg, node.property, JSON.parse(value));
          if (validate) {
            if (this.compiledSchema(msg[node.property])) {
              delete msg.schema;
              send(msg);
              done();
            } else {
              msg.schemaError = this.compiledSchema.errors;
              done(`${RED._("json.errors.schema-error")}: ${ajv.errorsText(this.compiledSchema.errors)}`);
            }
          } else {
            send(msg);
            done();
          }
        } catch (e) {
          done(e.message);
        }
      } else {
        // If node.action is str and value is str
        if (validate) {
          if (this.compiledSchema(JSON.parse(msg[node.property]))) {
            delete msg.schema;
            send(msg);
            done();
          } else {
            msg.schemaError = this.compiledSchema.errors;
            done(`${RED._("json.errors.schema-error")}: ${ajv.errorsText(this.compiledSchema.errors)}`);
          }
        } else {
          send(msg);
          done();
        }
      }
    } else if (typeof value === "object" || typeof value === "boolean" || typeof value === "number") {
      if (node.action === "" || node.action === "str") {
        if (!Buffer.isBuffer(value)) {
          try {
            if (validate) {
              if (this.compiledSchema(value)) {
                RED.util.setMessageProperty(msg, node.property, JSON.stringify(value, null, node.indent));
                delete msg.schema;
                send(msg);
                done();
              } else {
                msg.schemaError = this.compiledSchema.errors;
                done(`${RED._("json.errors.schema-error")}: ${ajv.errorsText(this.compiledSchema.errors)}`);
              }
            } else {
              RED.util.setMessageProperty(msg, node.property, JSON.stringify(value, null, node.indent));
              send(msg);
              done();
            }
          } catch (e) {
            done(RED._("json.errors.dropped-error"));
          }
        } else {
          node.warn(RED._("json.errors.dropped-object"));
          done();
        }
      } else {
        // If node.action is obj and value is object
        if (validate) {
          if (this.compiledSchema(value)) {
            delete msg.schema;
            send(msg);
            done();
          } else {
            msg.schemaError = this.compiledSchema.errors;
            done(`${RED._("json.errors.schema-error")}: ${ajv.errorsText(this.compiledSchema.errors)}`);
          }
        } else {
          send(msg);
          done();
        }
      }
    } else {
      node.warn(RED._("json.errors.dropped"));
      done();
    }
  } else {
    send(msg);
    done();
  } // If no property - just pass it on.
}



function main() {
  // Some useful logging
  console.log("Executing inside Javy's WASM VM");
  mm(msg,send,done);
  console.log("Executing inside Javy's WASM VM finishes");
}

main();