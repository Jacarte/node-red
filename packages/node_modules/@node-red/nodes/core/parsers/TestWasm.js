module.exports = async function(RED) {
    "use strict";
    console.log("Loading test wasm file");
    // Load the Wasm file
    //import { readFile } from 'node:fs/promises';

    const WASI = require('wasi');
    //console.log(WASI.WASI);
    const fs = require('fs');
    

    const wasi = new WASI.WASI({
      version: 'preview1',
      args: [ /* empty for now */ ],
      env: { /* empty for now */ },
      preopens: {
        // '/sandbox': '/dev/',
      },
    });

  function TestWasmNode(n) {
        RED.nodes.createNode(this,n);
        this.indent = n.pretty ? 4 : 0;
        this.action = n.action||"";
        this.property = n.property||"payload";
        this.schema = null;
        this.compiledSchema = null;

        var node = this;

        // TODO check if we can go up from here
        this.on("input", async function(msg, send, done) {
          const wasm = await WebAssembly.compile(
            fs.readFileSync(`${__dirname}/index2.wasm`),
          );
          
          const instance = await WebAssembly.instantiate(wasm, {
            ...wasi.getImportObject(),
            "env": {
              "node_red_msg_size": function() {
                 return 1024
              },
              "node_red_msg": function(data, offset, length){
                console.log("Returning msg", msg);
                return JSON.stringify(msg)
              },
              "node_red_send": function(data, offset, length){
                console.log("Sending data", data, offset, length);
                let d =  instance.exports.memory.buffer.slice(data + offset, data + offset + length);
                let buffer = new Uint8Array(d);
                let encoded = new TextDecoder().decode(buffer);
                // The message is changed here
                msg = JSON.parse(encoded);
                send(msg)
              },
              "node_red_done": function(data, offset, length){
                console.log("Sending done", data, offset, length);
                //done(JSON.parse(data))
              }
            }
          });

          // call the instance start function
          wasi.start(instance);

        });
    }

   RED.nodes.registerType("testWasm",TestWasmNode);
}
