import resolve from '@rollup/plugin-node-resolve';
import commonjs from '@rollup/plugin-commonjs';
import json from "@rollup/plugin-json";
import replace from '@rollup/plugin-replace';
import nodeGlobals from 'rollup-plugin-node-globals';
import builtins from 'rollup-plugin-node-builtins';

// Our plugins
// import JavyBuiltin from "../plugins/javy-fs.js";

export default {
  //input: '70-WJSON.logic.js', // your main entry point
  output: {
    format: 'cjs'  // output format compatible with Javy
  },
  plugins: [
    // This plugin first. TODO find a better solution using the rollup resolve mechanism
    replace({
      preventAssignment: true,
      // Add the Javy requires here
      //values: {
        'fs': JSON.stringify(`${__dirname}/../javy_js/fs.js`),
        'fs-extra': JSON.stringify(`${__dirname}/../javy_js/fs.js`),
        'https': JSON.stringify(`${__dirname}/../javy_js/https.js`),
        'os': JSON.stringify(`${__dirname}/../javy_js/os.js`),
        'wasi': JSON.stringify(`${__dirname}/../javy_js/wasi.js`),
        // 'wasm-red-process': JSON.stringify(`${__dirname}/../javy_js/process.js`),
      //},
      delimiters: ['"', '"']
    }), // Some Javy builtin functions: fs, https, etc.
    replace({
      preventAssignment: true,
      // Add the Javy requires here
      //values: {
        'fs': JSON.stringify(`${__dirname}/../javy_js/fs.js`),
        'fs-extra': JSON.stringify(`${__dirname}/../javy_js/fs.js`),
        'https': JSON.stringify(`${__dirname}/../javy_js/https.js`),
        'os': JSON.stringify(`${__dirname}/../javy_js/os.js`),
        'wasi': JSON.stringify(`${__dirname}/../javy_js/wasi.js`),
        // 'wasm-red-process': JSON.stringify(`${__dirname}/../javy_js/process.js`),
      //},
      delimiters: ['\'', '\'']
    }), // Some Javy builtin functions: fs, https, etc.77
    builtins(),
    resolve({
      browser: true,
      preferBuiltins: false
    }), // so Rollup can find `node_modules`
    commonjs(), // so Rollup can convert `node_modules` to an ES module,
    nodeGlobals(), // Solve process access
    json(), // To load json
  ],
};