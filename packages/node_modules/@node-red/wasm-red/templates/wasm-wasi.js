
// Use import instead
const WASI = require('wasi');
//console.log(WASI.WASI);
const fs = require('fs');
const debug = "{{{ debug }}}" || false;

const wasi = new WASI.WASI({
    version: 'preview1',
    args: [ /* empty for now */ ],
    env: { /* empty for now */ },
    preopens: {
      // '/sandbox': '/dev/',
    },
  });

  const wasm = await WebAssembly.compile(
    fs.readFileSync(`{{{wasmfile}}}`),
  );
  
  const instance = await WebAssembly.instantiate(wasm, {
    ...wasi.getImportObject(),
    "env": {
      "node_red_msg_size": function() {
         // Return the size in bytes of the message encoded as a JSON string 
         let json = JSON.stringify(msg);
         let buffer = new TextEncoder().encode(json);
         if(debug)  console.log("Sending msg size", buffer.byteLength);
         return buffer.byteLength;
      },
      "node_red_node_size": function() {
        // Return the size in bytes of the message encoded as a JSON string 
        let json = JSON.stringify(node);
        let buffer = new TextEncoder().encode(json);
        if(debug) console.log("Sending node struct size", buffer.byteLength);
        return buffer.byteLength;
     },
      "node_red_msg": function(data, offset, length){
        let json = JSON.stringify(msg);
        let buffer = new TextEncoder().encode(json);
        let bytes = new Uint8Array(instance.exports.memory.buffer, data + offset, length);
        bytes.set(buffer);
        if(debug)  console.log("Sending msg", data, offset, length);
        return buffer.byteLength;
      },
      "node_red_node": function(data, offset, length){
        let json = JSON.stringify(node);
        let buffer = new TextEncoder().encode(json);
        let bytes = new Uint8Array(instance.exports.memory.buffer, data + offset, length);
        bytes.set(buffer);
        if(debug) console.log("Sending node", data, offset, length);
        return buffer.byteLength;
      },
      "node_red_send": function(data, offset, length){
        console.log("Sending data", data, offset, length);
        let d =  instance.exports.memory.buffer.slice(data + offset, data + offset + length);
        let buffer = new Uint8Array(d);
        let encoded = new TextDecoder().decode(buffer);
        // The message is changed here
        msg = JSON.parse(encoded);
        if(debug) console.log("Calling node send", data, offset, length);
        node.send(msg)
      },
      "node_red_done": function(data, offset, length){
        //console.log("Done data", data, offset, length);
        let d =  instance.exports.memory.buffer.slice(data + offset, data + offset + length);
        let buffer = new Uint8Array(d);
        let encoded = new TextDecoder().decode(buffer);
        // The message is changed here
        if(encoded){
            msg = JSON.parse(encoded);
            if(debug) console.log("Calling node done", data, offset, length);
            node.done(msg)
        }
        else 
        {
          if(debug) console.log("Calling node done", data, offset, length);
          node.done()
        }
      }
    }
  });

  // call the instance start function
  try{

    var start = process.hrtime();
    wasi.start(instance);
    // wathever the result is, it is in the linear mem as a JSON, the function node_red_result is being called
    //console.log("Results length", GLOBAL_RESULT.length);
    var elapsed = process.hrtime(start)[1] / 1000000;
    console.log("Wasm execution time (hr): %dms", elapsed);
  }
  catch(e) {
    node.error(`${e}`);
    console.log("Error calling Wasm node", e)
  }